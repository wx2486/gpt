import io
import openai
import sys
import time
import traceback
import uuid

from contextlib import redirect_stdout

openai.api_key = "<OpenAI Secret Key>"
openai.aiosession = uuid.uuid4()
openai.organization = "<OpenAI Org ID>"

def loop():
    system_input = """You are GPT-4. You chat with the user and fulfill the user's requests. When you provide a python script, provide it as plain text. The script should not be marked by the label "```python" or "```"."""
    black_magic = """
    If you don't know the answer, you make a plan which could instruct GPT-4 to solve the problem step by step, and answer with this plan, surrounded by labels ">>>GPT-4>>>Execution>>>Plan>>>" and "<<<GPT-4<<<Execution<<<Plan<<<". I might have provided this plan in the same format. That is the plan you made previously.
    If you don't know the answer, you write a python script to retrieve more information. I will run this script and tell you the result. This python script should be surrounded only by labels ">>>GPT-4>>>Python>>>Script>>>" and "<<<GPT-4<<<Python<<<Script<<<". I might have provided this script in the same format. That is the script you generated previously.
    I might have provided a piece of text surrounded by the labels ">>>GPT-4>>>Script>>>Result>>>" and "<<<GPT-4<<<Script<<<Result<<<". This piece of text is the result of a python script we ran earlier. If you find no content between these two labels, that means no output was generated by the script you provided earlier.
    """
    boarder = "------------------------------------------------------------------------------------------------------------------------------------------------------------"
    plan = None
    result = None
    script = None
    goal = None

    print(f"Session ID {openai.aiosession}")
    print(boarder)

    while True:
        if plan is None and result is None:
            goal = input("User: ")
            print(boarder)

        messages = [{"role":"system", "content":system_input},
                    {"role":"user", "content":goal},
                    {"role":"user", "content":black_magic}]
        if plan is not None:
            messages.append({"role":"assistant", "content":f">>>GPT-4>>>Execution>>>Plan>>>{plan}<<<GPT-4<<<Execution<<<Plan<<<"})
        if script is not None:
            messages.append({"role":"assistant", "content":f">>>GPT-4>>>Python>>>Script>>>{script}<<<GPT-4<<<Python<<<Script<<<"})
        if result is not None:
            messages.append({"role":"user", "content":f">>>GPT-4>>>Script>>>Result>>>{result}<<<GPT-4<<<Script<<<Result<<<"})
        
        try:
            response = openai.ChatCompletion.create(model="gpt-4", messages=messages)
        except openai.error.RateLimitError:
            print("Rate limit exceeded. Waiting for 3 seconds.")
            print(boarder)
            time.sleep(3)
            response = openai.ChatCompletion.create(model="gpt-4", messages=messages)

        answer = response["choices"][0]["message"]["content"]
        script = parse(answer, ">>>GPT-4>>>Python>>>Script>>>", "<<<GPT-4<<<Python<<<Script<<<")
        plan = parse(answer, ">>>GPT-4>>>Execution>>>Plan>>>", "<<<GPT-4<<<Execution<<<Plan<<<")
        print(f"GPT-4: {answer}")
        print(boarder)

        result = None if script is None else run_untrusted_code(script)
        if result is not None:
            print(boarder)

        if result is not None:
            print(f"result: {result}")
            print(boarder)

def parse(answer, start_label, end_label, trim_python_label=True):
    start = answer.find(start_label)
    if start == -1:
        return None
    end = answer.find(end_label)
    if end == -1:
        return None
    if start > end:
        return None
    return answer[start+len(start_label):end].strip().strip("```").strip("python")

def run_untrusted_code(code_string):
    try:
        print(f"Running untrusted code: {code_string}")
        consent = input("Do you want to run this code? (Y/n) ")
        if consent != "Y" and consent != "y" and consent != "":
            raise Exception("User refused to run untrusted code.")

        original_stdout = sys.stdout
        try:
            buffer = io.StringIO()
            with redirect_stdout(buffer):
                exec(code_string)
            return buffer.getvalue()
        finally:
            sys.stdout = original_stdout
    except Exception as e:
        return f"""We got exception while running this script you provided:
            {code_string}
            {traceback.format_exc()}"""

if __name__ == "__main__":
    loop()
    
